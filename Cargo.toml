[package]
name = "papermario-solver"
description = "A solver for the ring puzzles in Paper Mario: Origami King"
version = "0.1.0"
authors = ["Alyssa Haroldsen <kupiakos@gmail.com>"]
categories = ["wasm"]
license = "MIT"
readme = "README.md"
edition = "2018"

[lib]
crate-type = ["cdylib"]
path = "src/solver.rs"

[profile.release]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode.
lto = true

[dependencies]
# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
wasm-bindgen = "0.2"

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. However, it is slower than the default
# allocator.
wee_alloc = "0.4"

serde = { version = "^1.0", features = ["derive"] }

# serde-wasm-bindgen allows conversion of native Rust structs to JavaScript.
serde-wasm-bindgen = "0.1.3"

[target."cfg(debug_assertions)".dependencies]
# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
web-sys = { version = "0.3", features = ["console"]}
# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so it's only enabled
# in debug mode.
console_error_panic_hook = "0.1.6"


# These crates are used for running unit tests.
[dev-dependencies]
# wasm-bindgen-test = "0.2.45"
# futures = "0.1.27"
# js-sys = "0.3"